#version 330 core

uniform vec2 sourcePos;
uniform vec2 pixOffset;
uniform sampler2D textureSampler;
uniform sampler2D noiseSampler;

in vec2 texCoords;

out vec4 color;

float neighbor(float xOffset, float yOffset) {
    return texture(textureSampler, vec2(texCoords.x + pixOffset.x * xOffset, 1 - texCoords.y + pixOffset.y * yOffset)).w;
}

void main() {
    color = texture(textureSampler, vec2(texCoords.x, 1 - texCoords.y));
    color += texture(noiseSampler, vec2(texCoords.x, 1 - texCoords.y)) * 0.1;
    color.w = 1;
    //if (color.w > 0) {
    //    color.w -= 1;
    //}
    if (color.x > 1) {
        color.x -= 1;
        color.y -= 1;
        color.z -= 1;
    }
}

/*void main() {
    /*float up = neighbor(0.0, 1.0);
    float down = neighbor(0.0, -1.0);
    float left = neighbor(-1.0, 0.0);
    float right = neighbor(1.0, 0.0);
    float center = neighbor(0.0, 0.0);
    float opacity = (up + down + left + right + center) * 0.2;*//*
    float opacity = neighbor(-1.0, -1.0);
    opacity += neighbor(0.0, -1.0);
    opacity += neighbor(1.0, -1.0);
    opacity += neighbor(0.0, 0.0);
    opacity += neighbor(0.0, -3.0) * 5;
    opacity /= 9;
    float dist = distance(sourcePos, texCoords);
    if (dist < 0.1) {
        opacity += 1 - dist * 10;
    }
    if (opacity > 1.0) {
        opacity = 1 - opacity;
    }
    color = vec4(1, 1, 1, opacity);
}*/